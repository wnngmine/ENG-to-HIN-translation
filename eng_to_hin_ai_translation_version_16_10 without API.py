# -*- coding: utf-8 -*-
"""ENG to HIN AI Translation - version 16.10

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b50r09FUCeUNAnV6RoPaAOsTIXE1EE-5
"""

import sys
import subprocess
subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "google-generativeai", "gspread"])

import google.generativeai as genai
import gspread
from google.colab import auth
from google.auth import default
import datetime
import requests
import time
import re

genai.configure(api_key="My_API_Key")
MODEL_NAME = "models/gemini-2.5-pro"

auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

# Open your sheet
SHEET_ID = "1G3WRCQA3oF5QX9Du6ydUdtYF2IuNKof9LuA47Cwzdgg"
sheet = gc.open_by_key(SHEET_ID).sheet1
SLACK_WEBHOOK = "My_Slack"

def send_slack_notification(message):
    try:
        response = requests.post(SLACK_WEBHOOK, json={"text": message})
        if response.status_code != 200:
            print(f"Slack notification failed: {response.status_code}")
    except Exception as e:
        print(f"Slack notification error: {e}")

# @title 3.1. Helper: Get Approved Feedback Examples (Optimized & Correct Statuses)
def get_feedback_examples(all_rows, limit=3):
    """
    Get approved translations with feedback for learning from the provided in-memory data.
    """
    examples = []
    # Statuses that qualify as a learning example
    APPROVED_STATUSES = ["APPROVED", "MANUALLY EDITED & APPROVED"]

    for row in all_rows:
        status = str(row.get("Status", "")).strip().upper()

        feedback_raw = row.get("Feedback for AI AgentTranslation", "")
        final_translation = row.get("Final Translation by Dhimahi", "").strip()
        english = row.get("English text", "").strip()

        if status in APPROVED_STATUSES and final_translation:
            feedback_content = feedback_raw.strip()

            examples.append({
                "english": english,
                "final_hindi": final_translation,
                "feedback": feedback_content if feedback_content else "No specific feedback left by reviewer."
            })

    # Returns only the most recent examples, controlled by 'limit'
    return examples[-limit:]

# @title 3.2. Helper: Build Translation Prompt (Final Optimized and Clear Rules)
def build_prompt(english_text, all_rows): # Accepts all_rows
    """Build prompt with learning examples and fixed rules from previous feedback"""

    # This calls get_feedback_examples with limit=3 (or whatever is set there).
    examples = get_feedback_examples(all_rows)

    # --- START OF FIXED SYSTEM INSTRUCTION ---
    prompt = (
        "You are a professional English-to-Hindi translator for marketing and promotional content "
        "in the iGaming industry. Translate for Sky365, Sky247, and BetBarter ‚Äî keep brand names in English.\n"
        "Translate naturally, persuasively, and accurately. "
        "Adhere strictly to the following fixed vocabulary and style rules:\n\n"

        # Explicit Rules from Reviewer Feedback
        "1. Fixed Vocabulary:\n"
        "   - Exchange must be translated as: ‡§è‡§ï‡•ç‡§∏‡§ö‡•á‡§Ç‡§ú\n"
        "   - Sportsbook must be translated as: ‡§∏‡•ç‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏‡§¨‡•Å‡§ï\n"
        "   - Bharat Sportsbook must be translated as: ‡§≠‡§æ‡§∞‡§§ ‡§∏‡•ç‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏‡§¨‡•Å‡§ï\n"
        "   - Cricket Power Boost must be translated as: ‡§ï‡•ç‡§∞‡§ø‡§ï‡•á‡§ü ‡§™‡§æ‡§µ‡§∞ ‡§¨‡•Ç‡§∏‡•ç‡§ü\n"
        "   - APP must be translated as: ‡§ê‡§™\n"
        "   - Bet Now must be translated as: ‡§Ö‡§≠‡•Ä ‡§¶‡§æ‡§Ç‡§µ ‡§≤‡§ó‡§æ‡§è‡§Å\n"
        "   - Play Now must be translated as: ‡§Ö‡§≠‡•Ä ‡§ñ‡•á‡§≤‡•á‡§Ç\n"
        "   - Check Now must be translated as: ‡§Ö‡§≠‡•Ä ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç\n"
        "   - Learn More must be translated as: ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡•á‡§Ç\n"
        "   - Read More must be translated as: ‡§Ö‡§ß‡§ø‡§ï ‡§™‡§¢‡§º‡•á‡§Ç\n"
        "   - Deposit Now must be translated as: ‡§Ö‡§≠‡•Ä ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç\n"

        "2. Fixed Phrases:\n"
        "   - The phrase 'Happy bets with Sky247!' must be translated exactly as: Sky247 ‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡§™‡•ç‡§™‡•Ä ‡§¨‡•á‡§ü‡•ç‡§∏!\n"

        "\n--- END OF FIXED RULES ---\n\n"

        "Follow these fixed rules AND learn from the specific reviewer preferences in the following examples:\n\n"
    )
    # --- END OF FIXED SYSTEM INSTRUCTION ---

    for ex in examples:
        # KEEP ALL THREE LINES! This is the learning unit.
        prompt += (
            f"English: {ex['english']}\n"
            f"Approved Hindi: {ex['final_hindi']}\n"
            f"Feedback: {ex['feedback']}\n\n"
        )
    prompt += f"Now translate this new text:\n{english_text}\n\nHindi:"

    # ... (Print block)

    return prompt

# @title 3.3. Core: Translate with Gemini API (WITH PRINT, RETRY & BACKOFF)
def translate_with_gemini(english_text, all_rows): # Accepts all_rows
    """Generate translation using Gemini with error handling and retry."""
    model = genai.GenerativeModel(MODEL_NAME)

    # Pass all_rows to build_prompt
    prompt = build_prompt(english_text, all_rows)

    # --- PROMPT PRINT STATEMENT ---
    print("\n" + "="*70, flush=True)
    print("--- START OF GEMINI PROMPT ---", flush=True)
    print("="*70, flush=True)
    print(prompt, flush=True)
    print("="*70, flush=True)
    print("--- END OF GEMINI PROMPT ---", flush=True)
    print("="*70 + "\n", flush=True)
    # ------------------------------

    MAX_RETRIES = 5
    for attempt in range(MAX_RETRIES):
        try:
            response = model.generate_content(prompt)
            return response.text.strip()

        except Exception as e:
            error_message = str(e)

            # Check for Rate Limit (429) Error
            if "429 POST" in error_message or "Quota exceeded" in error_message:
                print(f"‚ö†Ô∏è Rate Limit hit on attempt {attempt + 1}. Checking retry time.")

                match = re.search(r'Please retry in ([\d\.]+)s', error_message)
                if match:
                    wait_time = float(match.group(1))
                else:
                    wait_time = 2 ** attempt

                if attempt < MAX_RETRIES - 1:
                    print(f"   Waiting for {wait_time:.2f} seconds before retrying...")
                    time.sleep(wait_time + 1)
                    continue
                else:
                    print(f"‚ùå Failed after {MAX_RETRIES} attempts.")
                    return f"TRANSLATION_FAILED_ERROR: {error_message}"

            else:
                print(f"‚ùå Unrecoverable API Error on attempt {attempt + 1}: {error_message}")
                return f"TRANSLATION_FAILED_ERROR: {error_message}"

    return "TRANSLATION_FAILED_ERROR: Unknown failure."

# @title 4.1. Main Process: Generate Translations for 'Pending' Rows (Final & Optimized)
def process_pending_rows(rows): # Accepts the pre-read data
    """
    Processes rows with 'Pending' status using in-memory data.
    1. Generates AI translation and updates column G (7).
    2. Sends full English/Hindi text in Slack notification.
    3. Changes the Status in column F (6) to 'Notified | Waiting for approval'.
    """
    STATUS_COLUMN_INDEX = 6
    NEW_STATUS = "Notified | Waiting for approval"

    for i, row in enumerate(rows, start=2):
        status = str(row.get("Status", "")).strip().upper()
        english_text = row.get("English text", "").strip()
        ai_translation = row.get("Hindi Translation by AI agent", "").strip()
        sender_name = row.get("Sender", "Someone").strip()

        if status == "PENDING" and english_text and not ai_translation:
            print(f"Translating row {i} using Gemini...")

            # Pass the data to the translation pipeline
            hindi_translation = translate_with_gemini(english_text, rows)

            # Check for failed translation before proceeding
            if "TRANSLATION_FAILED_ERROR" in hindi_translation:
                print(f"‚ùå Row {i} FAILED translation. Skipping notification and status change.")
                sheet.update_cell(i, 7, hindi_translation)
                time.sleep(1)
                continue

            # 1. Update AI translation column (Column G / Index 7)
            sheet.update_cell(i, 7, hindi_translation)

            # 2. Notify reviewer via Slack (FULL TEXT SENT)
            link = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/edit#gid=0&range=A{i}"
            msg = (
                f"‚úçÔ∏è **{sender_name}** requested a new translation (Row {i}).\n"
                f"üìù *New translation ready for review*\n"
                f"*English:* {english_text}\n"
                f"*Hindi suggestion:* {hindi_translation}\n"
                f"<{link}|Review in Sheet>"
            )
            send_slack_notification(msg)
            print(f"‚úÖ Row {i} translated and sent to reviewer.")

            # 3. Change Status from PENDING to NOTIFIED (Column F / Index 6)
            print(f"   Changing status for row {i} to '{NEW_STATUS}'...")
            sheet.update_cell(i, STATUS_COLUMN_INDEX, NEW_STATUS)
            time.sleep(1)
            print("   Status updated (with brief pause for API sync).")



# @title 4.2. Main Process: Finalize 'Approved' and 'Manually edited & Approved' Rows (WITH TIME DELAYS)
def process_approved_rows():
    """Process approved/edited translations - copy to Final and add date"""
    rows = sheet.get_all_records()
    for i, row in enumerate(rows, start=2):
        status = str(row.get("Status", "")).strip().upper()
        ai_translation = row.get("Hindi Translation by AI agent", "").strip()
        final_translation = row.get("Final Translation by Dhimahi", "").strip()
        date_approved = row.get("Date approved", "").strip()

        # ONLY process if status is Approved or Manually edited & Approved AND date is NOT yet filled
        if status in ["APPROVED", "MANUALLY EDITED & AAPPROVED"] and not date_approved:

            # If status is APPROVED and Final column is empty, copy AI translation to Final
            if status == "APPROVED" and not final_translation and ai_translation:
                print(f"Status is Approved - Copying AI translation to Final column for row {i}...")
                sheet.update_cell(i, 8, ai_translation)  # Final Translation by Dhimahi (Index 8 / Column H)
                final_translation = ai_translation  # Update local variable
                time.sleep(1) # Added sleep after update

            # Fill Date approved for both Approved and Manually edited & Approved
            if final_translation:  # Make sure there's content in Final column
                current_date = str(datetime.datetime.now().strftime("%d/%m/%Y"))
                print(f"Filling Date approved for row {i}...")
                sheet.update_cell(i, 10, current_date)  # Date approved (Index 10 / Column J)
                time.sleep(1) # Added sleep after update

                # Notify Slack (rest of the logic is unchanged)
                link = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/edit#gid=0&range=A{i}"
                feedback = row.get("Feedback for AI AgentTranslation", "").strip()

                if status == "MANUALLY EDITED & APPROVED":
                    msg = (
                        f"‚úèÔ∏è *Translation edited and approved* (Row {i})\n"
                        f"*Reviewer made manual edits*\n"
                    )
                    if feedback:
                        msg += f"*Feedback:* {feedback[:150]}...\n"
                    msg += f"<{link}|Open Sheet>"
                else:
                    msg = (
                        f"‚úÖ *Translation approved* (Row {i})\n"
                        f"*AI translation accepted*\n"
                        f"<{link}|Open Sheet>"
                    )

                send_slack_notification(msg)
                print(f"‚úÖ Row {i} processed - Date: {current_date}")
            else:
                print(f"‚ö†Ô∏è Row {i} has status {status} but Final Translation is empty. Skipping.")

# @title 5.1. Run the Translation Automation (Optimized)
def run_translation_automation():
    """Main automation function: Reads data once, passes it to processors."""
    print("=" * 50)
    print("Starting Translation Automation")
    print(f"Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)

    # --- OPTIMIZATION: READ DATA ONCE ---
    print("\nReading entire sheet data ONCE...")
    try:
        # Fetch all records into memory
        all_rows = sheet.get_all_records()
        print(f"‚úÖ Successfully read {len(all_rows)} rows.")
    except Exception as e:
        print(f"‚ùå FATAL ERROR: Could not read sheet data. {e}")
        return
    # ------------------------------------

    print("\n1. Checking for Pending translations...")
    process_pending_rows(all_rows)

    # Re-read data before processing approvals to account for new 'Notified' statuses
    print("\nRe-reading sheet data to capture status and translation changes...")
    try:
        all_rows = sheet.get_all_records()
    except Exception as e:
        print(f"‚ùå FATAL ERROR: Could not re-read sheet data. {e}")
        return

    print("\n2. Checking for Approved/Edit to approve status changes...")
    process_approved_rows(all_rows)

    print("\n" + "=" * 50)
    print("‚úÖ All done!")
    print("=" * 50)

# Run the automation
run_translation_automation()